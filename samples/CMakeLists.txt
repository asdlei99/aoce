
set(targets 01_findmodule)
set(targetopencvs 02_showdevice 03_findvulkan) 

SET(OpenCV_DIR D:/WorkSpace/C++/opencv/opencv41/build/install)
find_package(OpenCV)   
message(STATUS "OpenCV library status:")
message(STATUS "    found: ${OpenCV_FOUND}")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    version: ${OpenCV_VERSION}")
message(STATUS "    libraries: ${OpenCV_LIBS}")
message(STATUS "    librarie path: ${OpenCV_LIB_PATH}")
message(STATUS "    include path: ${OpenCV_INCLUDE_DIRS}")

function(generate target isopencv)    
    set(source ${target}/${target}.cpp)     
    if("${ARGC}" LESS 3)    
        message(STATUS "ARGV2 none") 
        add_executable(${target} ${source})
    else()
        message(STATUS "ARGV2 = "${ARGV2})  
        add_executable(${target} WIN32 ${source})
    endif()    
    # target_link_options(${target} PRIVATE -mwindows)
    target_link_libraries(${target} aoce ${ARGV2})
    if(isopencv)        
        target_link_libraries(${target} ${OpenCV_LIBS} ${ARGV2})
    endif()
    aoce_output(${target})
endfunction(generate target)

function(sample)
    foreach(target ${targets})
        generate(${target} FALSE)
    endforeach()
    if(OpenCV_FOUND)
        foreach(target ${targetopencvs})
            generate(${target} TRUE)
        endforeach()    
    endif()    
endfunction(sample)

sample() 
generate(04_vulkantest FALSE aoce_vulkan ${Vulkan_LIBRARY})
include_directories(${AOCE_HEADER_DIR} ${OpenCV_INCLUDE_DIRS} ${AOCE_VULKAN_HEADER_DIR} ${Vulkan_INCLUDE_DIR})
